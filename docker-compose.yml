version: '3'
services:
  mongo:
    image: mongo
    volumes:
      - ./utilities-data/mongodb:/data/db
    ports:
      - "27017:27017"
  rabbitmq:
    image: rabbitmq:3-management
    ports:
      - "5672:5672"
      - "15672:15672" # RabbitMQ Management UI
    environment:
      RABBITMQ_DEFAULT_USER: dynamofl
      RABBITMQ_DEFAULT_PASS: dynamofl
    volumes:
      - ./utilities-data/rabbitmq:/var/lib/rabbitmq
  redis:
    image: 'bitnami/redis:latest'
    environment:
      - ALLOW_EMPTY_PASSWORD=yes
    ports:
      - '6379:6379'
    volumes: 
      - ./utilities-data/cache:/data
  worker:
    build:
      context: ./workers
      dockerfile: Dockerfile
    command: celery -A main worker --loglevel=INFO -Q dynamofl -n dynamofl --concurrency 5
    environment:
      RABBITMQ_HOST: rabbitmq
      RABBITMQ_USER: dynamofl
      RABBITMQ_PASS: dynamofl
      BACKEND_ENDPOINT: http://host.docker.internal:3000
    volumes:
      - ./workers:/data
      - /tmp/dynamofl:/tmp/dynamofl # Mounting because backend writes files this directory on machine
    working_dir: /data
    extra_hosts:
      - "host.docker.internal:host-gateway" # Allows celery to communicate to backend running locally
    depends_on:
      - mongo
      - redis
      - rabbitmq

  flower:
    build:
      context: ./workers
      dockerfile: Dockerfile
    command: celery -A main flower --broker_api=http://dynamofl:dynamofl@rabbitmq:15672/api/vhost
    volumes:
      - ./workers:/data
    working_dir: /data
    environment:
      FLOWER_UNAUTHENTICATED_API: 'true'
      RABBITMQ_HOST: rabbitmq
      RABBITMQ_USER: dynamofl
      RABBITMQ_PASS: dynamofl
      FLOWER_PORT: 5555
    ports:
      - 5555:5555
    depends_on:
      - worker
  prometheus:
    image: prom/prometheus
    volumes:
      - ./prometheus.yml:/etc/prometheus/prometheus.yml
    ports:
      - 9090:9090
  grafana:
    image: grafana/grafana
    depends_on:
      - prometheus
    ports:
      - 3002:3000
